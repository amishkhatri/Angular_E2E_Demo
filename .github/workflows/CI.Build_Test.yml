name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
     CODE_COVERAGE_THRESHOLD: 20
     LOCAL_CODE_COVERAGE_OPTIN_FLAG: ${{ vars.CODE_COVERAGE_OPTIN_FLAG }}

permissions:
pull-requests: none
push: none
checks: none
actions: none
statuses: none
  users:
    - amishkhatri
    
jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]
        
    steps:
    - uses: actions/checkout@v1
      
    - name: Use variable
      run:  echo "LOCAL_CODE_COVERAGE_OPTIN_FLAG:$LOCAL_CODE_COVERAGE_OPTIN_FLAG"
      
    - name: Use Node.js 18.16.0
      uses: actions/setup-node@v2
      with:
        node-version: 18.16.0

    - name: Install Angular CLI and dependencies
      run: |
        npm install -g @angular/cli --force
        npm install --save-dev @angular-devkit/build-angular --force

    - name: Install dependencies
      run: npm ci

    - name: Set up Xvfb
      run: |
        export DISPLAY=:99
        sudo apt-get install -y xvfb
        Xvfb -screen 0 1024x768x24 :99 &

     - name: SonarCloud Scan
    # uses: SonarSource/sonarcloud-github-action@5875562561d22a34be0c657405578705a169af6c
        uses: SonarSource/sonarcloud-github-action@v1.9.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
          SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
          SONAR_ANALYSIS_MODE: "preview"
        with:
          # Additional arguments to the sonarcloud scanner
          args: # optional
          # Set the sonar.projectBaseDir analysis property
          projectBaseDir: # optional, default is .


    - name: Run tests
      run: |
        npm run build --prod
        # xvfb-run -a ng test --configuration=development
        xvfb-run -a ng test --configuration=development --browsers=ChromeHeadless --code-coverage --watch=false --progress=true
        # timeout-minutes: 4
        
    - name: Conditional - code coverage check
      id: code_coverage
      run: |
          coverage_file="./coverage/angular-inmemory-api/index.html"
          statement_coverage=$(grep -oP "(?<=<span class=\"strong\">)\d+\.\d+(?=% )" "$coverage_file")
          branch_coverage=$(grep -oP "(?<=<span class=\"strong\">)\d+\.\d+(?=% </span>)" "$coverage_file" | tail -n 1)
          function_coverage=$(grep -oP "(?<=<span class=\"strong\">)\d+\.\d+(?=% </span>)" "$coverage_file" | tail -n 2 | head -n 1)
          line_coverage=$(grep -oP "(?<=<span class=\"strong\">)\d+\.\d+(?=% </span>)" "$coverage_file" | tail -n 3 | head -n 1)
          # echo "Statement Coverage:$statement_coverage"
          # echo "Branch Coverage:$branch_coverage"
          # echo "Function Coverage:$function_coverage"
          # echo "Line Coverage:$line_coverage"

          if [ "$(echo "$statement_coverage < ${{ env.CODE_COVERAGE_THRESHOLD }}" | bc)" -eq 1 ]; then
            echo "Statement Code coverage is less than ${{ env.CODE_COVERAGE_THRESHOLD }}%. JOB ABORTED !! ..."
       
            exit 1  # This will mark the workflow as failed
          else
          
            echo "Statement Code coverage is acceptable: $statement_coverage%"
          fi

          if [ "$(echo "$branch_coverage < ${{ env.CODE_COVERAGE_THRESHOLD }}" | bc)" -eq 1 ]; then
            echo "Branch Code coverage is less than ${{ env.CODE_COVERAGE_THRESHOLD }}%. JOB ABORTED !!..."
         
            exit 1  # This will mark the workflow as failed
          else
            echo "Branch Code coverage is acceptable: $branch_coverage%"
          fi

          if [ "$(echo "$function_coverage < ${{ env.CODE_COVERAGE_THRESHOLD }}" | bc)" -eq 1 ]; then
            echo "Function Code coverage is less than ${{ env.CODE_COVERAGE_THRESHOLD }}%.  JOB ABORTED !!..."

             exit 1  # This will mark the workflow as failed
          else

            echo "Function Code coverage is acceptable: $function_coverage%"
          fi

          if [ "$(echo "$line_coverage < ${{ env.CODE_COVERAGE_THRESHOLD }}" | bc)" -eq 1 ]; then
            echo "Line Code coverage is less than ${{ env.CODE_COVERAGE_THRESHOLD }}%.  JOB ABORTED !!..."

             exit 1  # This will mark the workflow as failed
          else

            echo "Line Code coverage is acceptable: $line_coverage%"
          fi
      if: ${{ env.LOCAL_CODE_COVERAGE_OPTIN_FLAG == 'TRUE' }}
      
